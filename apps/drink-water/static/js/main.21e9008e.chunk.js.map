{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","spinDisplay","_useState","useState","_useState2","Object","slicedToArray","times","setTimes","_useState3","_useState4","ifDrink","setIfDrink","_useState5","_useState6","btnText","setBtnText","_useState7","_useState8","waterHeight","setWaterHeight","_useState9","_useState10","spinning","setSpinning","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","waterRealHeight","document","getElementById","offsetHeight","window","innerHeight","message","success","react_default","a","createElement","style","color","height","es_button","type","ghost","onMouseEnter","onMouseLeave","display","justifyContent","alignItems","wordBreak","whiteSpace","width","background","zIndex","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21e9008e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { message, Button, } from 'antd';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction App() {\n  const [times, setTimes] = useState(0);\n  const [ifDrink, setIfDrink] = useState(false);\n  const [btnText, setBtnText] = useState(\"\");\n  const [waterHeight, setWaterHeight] = useState(100);\n  const [spinning, setSpinning] = useState(false);\n\n  function onMouseEnter() {\n    setWaterHeight(0);\n    setBtnText(\"DRINKING\");\n  }\n\n  function onMouseLeave() {\n    setWaterHeight(100);\n    if (!ifDrink) {\n      setBtnText(\"\");\n    }\n  }\n\n  useInterval(() => {\n    let waterRealHeight = document.getElementById(\"water\").offsetHeight;\n    if (waterRealHeight === 0 && !ifDrink) {\n      message.success(<strong>\n        You have drunk <span style={{ \"color\": \"#66ccff\" }}>{times + 1}</span> times\n      </strong>, 3);\n      setTimes(times + 1);\n      setBtnText(\"POUR IN\");\n      setIfDrink(true);\n      setSpinning(true);\n      setWaterHeight(100);\n    } else if (waterRealHeight >= window.innerHeight - 1) {\n      setSpinning(false);\n      setIfDrink(false);\n      setBtnText(\"\");\n    }\n  }, 100);\n\n  let spinDisplay;\n  if (spinning) {\n    spinDisplay = \"flex\";\n  } else {\n    spinDisplay = \"none\";\n  }\n\n  return (\n    <div>\n      <div id=\"water\" style={{ \"height\": waterHeight + \"vh\" }}>\n      </div>\n      <div id=\"button-area\">\n        <Button id=\"drink-button\" type=\"dashed\" ghost\n          onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}\n          style={{ \"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\"\n          }}>\n          <p style={{\"wordBreak\": \"break-all\", \"whiteSpace\": \"normal\"}}>{btnText}</p>\n        </Button>\n      </div>\n      <div id=\"spinner-area\">\n        <div style={{\n          \"height\": \"100vh\", \"width\": \"100vw\",\n          \"background\": \"rgba(0,0,0,0.3)\", \"zIndex\": 999, \"display\": spinDisplay\n        }} />\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}